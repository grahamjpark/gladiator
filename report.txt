CS252 - Lab6 - aTildeTheHun
Team: Timothy Vincent (vincent3), Graham Park (park580), Mitch Holm (mholm), John Du, (du55)

Strategy used:
Through our testing, we found out that the parent process will have longer quantums than the children forked process. We wanted to use this to our advantage by killing the competiton in the parent, then forking until we had filled the arena. We also set the priority of our program to max and compile with flags such as Ofast, flto and fno-stack-protector to make the program as fast as possible.

Predicted results:
Assuming other fighters do not use setPriority, we will always win because we get to spend the most time with the CPU. And because we use the most time with the CPU, we get to kill the other processes before they can kill us. However, if another process shares our priority, we will probably lose because our only real defense is our priority.

Strategies explored: 
- Reading Proc, this was too slow due to the overhead it takes to read from a file. 
- We tried communicating between all child processes with mmap and a shared array that corresponds to the processes ID, thus if a child wants to kill it first looks up if the pid is one of our own. This strategy was pretty effective however, mmap did cost us dearly in time.
- Forking inside a fork, in theory this would work very well but, due to application scheduling and the overhead it costs to fork, it was not much more effective to do. Running against fork, it had 11 children where fork had 9 but, that could be because it went first.
- Forking then killing down and up. This is where we got the basis for our current strategy but, the issue with killing up is you usually end up killing the child process. 
- SSH into another computer and nuke the original arena. SSH proved to be a very slow call, especially because it relies on Internet.
- Setting up a cron job with the Makefile to constantly delete arena processes. This was not feasible because the minimum time resolution for cron is 1 minute.
- Running a bash script that constantly searched for arena processes to kill in a while loop. It turns out sudo is necessary for that, which means the script wouldn't run in the end.
- Creating a file that runs itself after a period of time. This was an idea for beating flash, which killed everything including itself. However, running a file without making a process that would be killed by flash was infeasible.
- Killing the original arena process and making a new arena with only our process in it. Then we read how the project actually worked.
